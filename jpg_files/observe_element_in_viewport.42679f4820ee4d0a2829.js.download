(()=>{var o={};o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(o){if("object"==typeof window)return window}}(),("undefined"!=typeof window?window:void 0!==o.g?o.g:"undefined"!=typeof self?self:{}).SENTRY_RELEASE={id:"37c936e1e1372ce68eec27a8653bcebac06d7e55"},function(o){function e(o,e,t,n){if(void 0===t&&(t=function(){}),void 0===n&&(n={}),!o)throw new Error("Target element to observe should be a valid DOM Node");var r=Object.assign({},{viewport:null,modTop:"0px",modRight:"0px",modBottom:"0px",modLeft:"0px",threshold:[0]},n),i=r.viewport,u=r.modTop,f=r.modLeft,a=r.modBottom,d=r.modRight,s=r.threshold;if(!Array.isArray(s)&&"number"!=typeof s)throw new Error("threshold should be a number or an array of numbers");var c=Array.isArray(s)?s.map((function(o){return Math.floor(o%101)/100})):[Math.floor(s?s%101:0)/100],h=Math.min.apply(Math,c),l={root:i instanceof Node?i:null,rootMargin:u+" "+d+" "+a+" "+f,threshold:c},w=new IntersectionObserver((function(n,r){var i=n.filter((function(e){return e.target===o}))[0],u=function(){return r.unobserve(o)};i&&(i.isInViewport=i.isIntersecting&&i.intersectionRatio>=h,i.isInViewport?e(i,u,o):t(i,u,o))}),l);return w.observe(o),function(){return w.unobserve(o)}}o.observeElementInViewport=e,o.isInViewport=function(o,t){return void 0===t&&(t={}),new Promise((function(n,r){try{e(o,(function(o,e){e(),n(!0)}),(function(o,e){e(),n(!1)}),t)}catch(o){r(o)}}))}}(window)})();
//# sourceMappingURL=observe_element_in_viewport.42679f4820ee4d0a2829.js.map